function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    X_offset = 0;
    Y_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP = 2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    xTarget = floor(map(size_map, 1)) + X_offset;
    yTarget = floor(map(size_map, 2)) + Y_offset;
    MAP(xTarget, yTarget) = 0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval = floor(map(i, 1)) + X_offset;
        yval = floor(map(i, 2)) + Y_offset;
        MAP(xval,yval) = -1;
    end 
    
    %Initialize MAP with location of the start point
    xStart = floor(map(1, 1)) + X_offset;
    yStart = floor(map(1, 2)) + Y_offset;
    MAP(xStart,yStart) = 1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN = [];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED = [];

    %Put all obstacles on the Closed list
    k=1; %Dummy counter
    for i = 1:MAX_X
        for j = 1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1) = i;
                CLOSED(k,2) = j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);

    %set the starting node as the first node
    xNode = xStart;
    yNode = yStart;
    OPEN_COUNT=1;
    goal_distance = distance(xNode,yNode,xTarget,yTarget);
    path_cost = 0;
    OPEN(OPEN_COUNT,:) = insert_open(xStart,yStart,xStart,yStart,goal_distance,path_cost,goal_distance);
    % 注释掉这几行因为后面循环里面会改
    % OPEN(OPEN_COUNT,1) = 0;
    % CLOSED_COUNT = CLOSED_COUNT + 1;
    % CLOSED(CLOSED_COUNT,1) = xStart;
    % CLOSED(CLOSED_COUNT,2) = yStart;
    HasPath = 0;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(~all(OPEN(:, 1) == 0)) %you have to dicide the Conditions for while loop exit
        i_min = min_fn(OPEN, OPEN_COUNT)

        OPEN(i_min,1)=0;
        CLOSED_COUNT = CLOSED_COUNT + 1;
        CLOSED(CLOSED_COUNT,1:2) = OPEN(i_min,2:3);

        xNode = OPEN(i_min,2);
        yNode = OPEN(i_min,3);
        
        % 判断是否找到target_node
        if(xNode == xTarget && yNode == yTarget)
            HasPath = 1;
            break;
        end
        
        gn = OPEN(i_min,7);
        % 扩散节点node的邻近节点，返回由邻近节点数据组成的矩阵exp_array
        exp_array = expand_array(node_x, node_y, gn, xTarget, yTarget, CLOSED, MAX_X, MAX_Y);
        n_neighbor = size(exp_array,1);

        for i = 1:n_neighbor
            xval = exp_array(i,1);
            yval = exp_array(i,2);
            hval = exp_array(i,3);
            gval = exp_array(i,4);
            fval = exp_array(i,5);
            
            j = node_index(OPEN,xval,yval);
            if ~isempty(j)
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT,1) = 1;
                OPEN(OPEN_COUNT,2) = xval;
                OPEN(OPEN_COUNT,3) = yval;
                OPEN(OPEN_COUNT,4) = xNode;
                OPEN(OPEN_COUNT,5) = yNode;
                OPEN(OPEN_COUNT,6) = hval;
                OPEN(OPEN_COUNT,7) = gval;
                OPEN(OPEN_COUNT,8) = fval;
            else
                if fval < OPEN(j,8)
                    OPEN(OPEN_COUNT,4) = xNode;
                    OPEN(OPEN_COUNT,5) = yNode;
                    OPEN(OPEN_COUNT,6) = hval;
                    OPEN(OPEN_COUNT,7) = gval;
                    OPEN(OPEN_COUNT,8) = fval;
                end    
            end    
        end
     
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
    path = [];
    if HasPath
        k = 1;
        xval = xTarget;
        yval = yTarget;
        path(k,1) = xval;
        path(k,2) = yval;
        while xval ~= xStart && yval ~= xStart
            i = node_index(OPEN,xval,yval);
            xParent = OPEN(i,4);
            yParent = OPEN(i,5);
            k = k + 1;
            path(k,1) = xParent;
            path(k,2) = yParent;
        end
        path = flip(path);
    end    
end
